https://pintia.cn/problem-sets/994805342720868352/problems/994805454989803520

解题思路：每次读入的用户名和密码，先去判断密码需不需要修改，判断原密码和change函数返回的密码是否相等, 被修改的话，用User类创建的用户数组去存储

import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int N;
		N = sc.nextInt();
		User[] users = new User[N];
		int M = 0;
		for(int i=0; i<N; i++) {
			String cur_name = sc.next();
			String cur_password = sc.next();
			String change_password = change(cur_password);
			if(!cur_password.equals(change_password))
				users[M++] = new User(cur_name, change_password);
		}
		
		if(M == 0) {
			if(N == 1)
				System.out.print("There is 1 account and no account is modified");
			else
				System.out.print("There are "+N+" accounts and no account is modified");
		}
		else {
			System.out.println(M);
			for(int i=0; i<M; i++) {
				if(i==M-1) {
					System.out.print(users[i].name+" "+users[i].password);
				}
				else
					System.out.println(users[i].name+" "+users[i].password);
			}
		}
	}
	public static String change(String str) {
		
		StringBuilder passWord = new StringBuilder();
		for(int i=0; i<str.length(); i++) {
			if(str.charAt(i) == '1') {
				passWord.append("@");
			}else if(str.charAt(i) == '0'){
				passWord.append("%");
			}else if(str.charAt(i) == 'l') {
				passWord.append("L");
			}else if(str.charAt(i) == 'O') {
				passWord.append("o");
			}else {
				passWord.append(str.charAt(i));
			}
		}
		return passWord.toString();
	}

}
 class User{
	 public String name;
	 public String password;
	 
	 public User(String name, String password) {
		super();
		this.name = name;
		this.password = password;
	}
	 
 }
